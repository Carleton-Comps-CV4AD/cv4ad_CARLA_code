#!/usr/bin/env python

# Copyright (c) 2019 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

import glob
import os
import sys


try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla # type: ignore

import random
import time
import math

# seconds per tick
SPT = 5.0
SSPT = 300.0

def main():
    actor_list = []

    
    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.
    try:
        # First of all, we need to create the client that will send the requests
        # to the simulator. Here we'll assume the simulator is accepting
        # requests in the localhost at port 2000.
        client = carla.Client('localhost', 2000)
        client.set_timeout(10.0)

        # Once we have a client we can retrieve the world that is currently
        # running.
        world = client.get_world()

        # Change some world setting to make things faster
        # settings = world.get_settings()
        # settings.fixed_delta_seconds = 0.05
        # world.apply_settings(settings)




        traffic_manager = client.get_trafficmanager()

        # The world contains the list blueprints that we can use for adding new
        # actors into the simulation.
        blueprint_library = world.get_blueprint_library()

        # Now let's filter all the blueprints of type 'vehicle' and choose one
        # at random.
        bp = random.choice(blueprint_library.filter('cybertruck'))
        bp2 = random.choice(blueprint_library.filter('charger_police'))

        # A blueprint contains the list of attributes that define a vehicle's
        # instance, we can read them and modify some of them. For instance,
        # let's randomize its color.
        if bp.has_attribute('color'):
            color = random.choice(bp.get_attribute('color').recommended_values)
            bp.set_attribute('color', color)

        spawn_points = world.get_map().get_spawn_points()
        # Route 1
        spawn_point_1 =  spawn_points[32]
        # Create route 1 from the chosen spawn points
        route_1_indices = [17, 70, 130, 29, 79, 101, 55, 57, 119, 59, 112, 32]
        route_1 = []
        for ind in route_1_indices:
            route_1.append(spawn_points[ind].location)

        spawn_point_2 =  spawn_points[125]
        route_2_indices = [7, 9, 15, 69, 113, 20, 44, 41, 117]
        route_2 = []
        for ind in route_2_indices:
            route_2.append(spawn_points[ind].location)


        # Now we need to give an initial transform to the vehicle. We choose a
        # random transform from the list of recommended spawn points of the map.
        transform = spawn_point_1
        transform2 = spawn_point_2

        # So let's tell the world to spawn the vehicle.
        vehicle = world.spawn_actor(bp, transform)
        police = world.spawn_actor(bp2, transform2)

        # It is important to note that the actors we create won't be destroyed
        # unless we call their "destroy" function. If we fail to call "destroy"
        # they will stay in the simulation even after we quit the Python script.
        # For that reason, we are storing all the actors we create so we can
        # destroy them afterwards.
        actor_list.append(vehicle)
        actor_list.append(police)
        print('created %s' % vehicle.type_id)
        print('created %s' % police.type_id)


        # Let's add now a "depth" camera attached to the vehicle. Note that the
        # transform we give here is now relative to the vehicle.
        camera_bp = blueprint_library.find('sensor.camera.rgb')
        #https://github.com/carla-simulator/carla/issues/2176 (bless)
        camera_bp.set_attribute('sensor_tick', str(SPT))
        camera_transform = carla.Transform(carla.Location(x=1.5, z=2.4))
        camera = world.spawn_actor(camera_bp, camera_transform, attach_to=vehicle)
        actor_list.append(camera)
        print('created %s' % camera.type_id)

        camera2_bp = blueprint_library.find('sensor.camera.semantic_segmentation')
        camera2_bp.set_attribute('sensor_tick', str(SPT))
        camera2_transform = carla.Transform(carla.Location(x=1.5, z=2.4))
        camera2 = world.spawn_actor(camera2_bp, camera2_transform, attach_to=vehicle)
        actor_list.append(camera2)

        traffic_manager.set_path(police, route_2)
        print('created %s' % camera2.type_id)

        camera3_bp = blueprint_library.find('sensor.lidar.ray_cast')
        camera3_bp.set_attribute('sensor_tick', str(SPT))
        camera3_transform = carla.Transform(carla.Location(x=1.5, z=2.4))
        camera3 = world.spawn_actor(camera3_bp, camera3_transform, attach_to=vehicle)
        actor_list.append(camera3)
        print('created %s' % camera3.type_id)

        camera4_bp = blueprint_library.find('sensor.lidar.ray_cast_semantic')
        camera4_bp.set_attribute('sensor_tick', str(SPT))
        camera4_transform = carla.Transform(carla.Location(x=1.5, z=2.4))
        camera4 = world.spawn_actor(camera4_bp, camera4_transform, attach_to=vehicle)
        actor_list.append(camera4)
        print('created %s' % camera4.type_id)


        # Now we register the function that will be called each time the sensor
        # receives an image. In this example print(client.get_available_maps())we are saving the image to disk
        # converting the pixels to gray-scale.
        cc = carla.ColorConverter.Raw

        class myint():
            def __init__(self, value):
                self.value = value

            def pp(self):
                self.value += 1
        
        counter = myint(0)
        counter2 = myint(0)
        counter3 = myint(0)
        counter4 = myint(0)

                
        def save_image(image, counter, name, file_type, cc = None):
            image_path = f'{name}_{counter.value}.{file_type}'
            if cc:
                image.save_to_disk(image_path, cc)
            else:
                image.save_to_disk(image_path)
            counter.pp()

        # camera.listen(lambda image: image.save_to_disk(f'_outRaw/raw_{counter}.png', cc))
        
        # # cc2 = carla.ColorConverter.CityScapesPalette
        # camera2.listen(lambda image: image.save_to_disk(f'_outSeg/seg_{counter}.png'))

        # camera3.listen(lambda image: image.save_to_disk(f'_outLIDAR/raw_{counter}.ply'))

        # camera4.listen(lambda image: image.save_to_disk(f'_outLIDARseg/seg_{counter}.ply'))

        camera.listen(lambda image: save_image(image, counter = counter, 
                        name = '_outRaw/raw', file_type = 'png', cc = cc))
        
        # cc2 = carla.ColorConverter.CityScapesPalette
        camera2.listen(lambda image: save_image(image, counter = counter2, 
                        name = '_outSeg/seg', file_type = 'png'))

        camera3.listen(lambda image: save_image(image, counter = counter3, 
                        name = '_outLIDAR/raw', file_type = 'ply'))

        camera4.listen(lambda image: save_image(image, counter = counter4, 
                        name = '_outLIDARseg/seg', file_type = 'ply'))

        # Oh wait, I don't like the location we gave to the vehicle, I'm going
        # to move it a bit forward.
        location = vehicle.get_location()
        vehicle.set_location(location)
        print('moved vehicle to %s' % location)

        location2 = police.get_location()
        police.set_location(location2)
        print('moved vehicle to %s' % location2)

        vehicle.set_autopilot(True)
        police.set_autopilot(True)



        traffic_manager.set_path(vehicle, route_1)

        traffic_manager.set_path(police, route_2)

        # Select some models from the blueprint library
        models = ['dodge', 'audi', 'model3', 'mini', 'mustang', 'lincoln', 'prius', 'nissan', 'crown', 'impala']
        blueprints = []
        for v in world.get_blueprint_library().filter('*vehicle*'):
            if any(model in v.id for model in models):
                blueprints.append(v)

        # Set a max number of vehicles and prepare a list for those we spawn
        max_vehicles = 20
        max_vehicles = min([max_vehicles, len(spawn_points)])
        vehicles = []
        
        for i, spawn_point in enumerate(random.sample(spawn_points, max_vehicles)):
            temp = world.try_spawn_actor(random.choice(blueprints), spawn_point)
            if temp is not None:
                vehicles.append(temp)

        for v in vehicles:
            v.set_autopilot(True) 
            traffic_manager.random_left_lanechange_percentage(v, 0)
            traffic_manager.random_right_lanechange_percentage(v, 0)
            traffic_manager.auto_lane_change(v, False)  


        # # But the city now is probably quite empty, let's add a few more
        # # vehicles.
        # transform.location += carla.Location(x=40, y=-3.2)
        # transform.rotation.yaw = -180.0
        # for _ in range(0, 10):
        #     transform.location.x += 8.0

        #     bp = random.choice(blueprint_library.filter('vehicle'))

        #     # This time we are using try_spawn_actor. If the spot is already
        #     # occupied by another object, the function will return None.
        #     npc = world.try_spawn_actor(bp, transform)
        #     if npc is not None:
        #         actor_list.append(npc)
        #         npc.set_autopilot(True)
        #         print('created %s' % npc.type_id)


        t_end = time.time() + 2520
        while time.time() < t_end:
            world.tick()

            # if vehicle.is_at_traffic_light():
            #     traffic_light = vehicle.get_traffic_light()
            #     if traffic_light.get_state() == carla.TrafficLightState.Red:
            #         traffic_light.set_state(carla.TrafficLightState.Green)
            #         traffic_light.set_green_time(4.0)
            #         print('telsa light changed')
        
            # if police.is_at_traffic_light():
            #     traffic_light2 = police.get_traffic_light()
            #     if traffic_light2.get_state() == carla.TrafficLightState.Red:
            #         traffic_light2.set_state(carla.TrafficLightState.Green)
            #         traffic_light2.set_green_time(4.0)
            #         print('police light changed')

    finally:

        print('destroying actors')
        camera.destroy()
        camera2.destroy()
        camera3.destroy()
        camera4.destroy()
        client.apply_batch([carla.command.DestroyActor(x) for x in actor_list])
        client.apply_batch([carla.command.DestroyActor(x) for x in vehicles])
        print('done.')


if __name__ == '__main__':

    main()
